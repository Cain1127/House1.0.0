// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class Question;
class Answer;

enum ChatRequestType {
  ChatTypeSendPTP = 8000,
  ChatTypeSendPTG = 8001,
  ChatTypeOnLine = 8002,
  ChatTypeOffLine = 8003
};
bool ChatRequestType_IsValid(int value);
const ChatRequestType ChatRequestType_MIN = ChatTypeSendPTP;
const ChatRequestType ChatRequestType_MAX = ChatTypeOffLine;

const ::google::protobuf::EnumDescriptor* ChatRequestType_descriptor();
inline const ::std::string& ChatRequestType_Name(ChatRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatRequestType_descriptor(), value);
}
inline bool ChatRequestType_Parse(
    const ::std::string& name, ChatRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatRequestType>(
    ChatRequestType_descriptor(), name, value);
}
// ===================================================================

class Question : public ::google::protobuf::Message {
 public:
  Question();
  virtual ~Question();
  
  Question(const Question& from);
  
  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Question& default_instance();
  void Swap(Question* other);
  
  // implements Message ----------------------------------------------
  
  Question* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 mid = 1;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::google::protobuf::int64 mid() const;
  inline void set_mid(::google::protobuf::int64 value);
  
  // required int64 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int64 tid() const;
  inline void set_tid(::google::protobuf::int64 value);
  
  // required .chat.ChatRequestType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline chat::ChatRequestType type() const;
  inline void set_type(chat::ChatRequestType value);
  
  // optional string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // optional bytes pic = 5;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 5;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const void* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional bytes video = 6;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 6;
  inline const ::std::string& video() const;
  inline void set_video(const ::std::string& value);
  inline void set_video(const char* value);
  inline void set_video(const void* value, size_t size);
  inline ::std::string* mutable_video();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 mid_;
  ::google::protobuf::int64 tid_;
  int type_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::std::string* video_;
  static const ::std::string _default_video_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Question* default_instance_;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message {
 public:
  Answer();
  virtual ~Answer();
  
  Answer(const Answer& from);
  
  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();
  void Swap(Answer* other);
  
  // implements Message ----------------------------------------------
  
  Answer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  
  // required .chat.ChatRequestType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline chat::ChatRequestType type() const;
  inline void set_type(chat::ChatRequestType value);
  
  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // optional bytes pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const void* value, size_t size);
  inline ::std::string* mutable_pic();
  
  // optional bytes video = 5;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 5;
  inline const ::std::string& video() const;
  inline void set_video(const ::std::string& value);
  inline void set_video(const char* value);
  inline void set_video(const void* value, size_t size);
  inline ::std::string* mutable_video();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* result_;
  static const ::std::string _default_result_;
  int type_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  ::std::string* pic_;
  static const ::std::string _default_pic_;
  ::std::string* video_;
  static const ::std::string _default_video_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Answer* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Question

// required int64 mid = 1;
inline bool Question::has_mid() const {
  return _has_bit(0);
}
inline void Question::clear_mid() {
  mid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Question::mid() const {
  return mid_;
}
inline void Question::set_mid(::google::protobuf::int64 value) {
  _set_bit(0);
  mid_ = value;
}

// required int64 tid = 2;
inline bool Question::has_tid() const {
  return _has_bit(1);
}
inline void Question::clear_tid() {
  tid_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 Question::tid() const {
  return tid_;
}
inline void Question::set_tid(::google::protobuf::int64 value) {
  _set_bit(1);
  tid_ = value;
}

// required .chat.ChatRequestType type = 3;
inline bool Question::has_type() const {
  return _has_bit(2);
}
inline void Question::clear_type() {
  type_ = 8000;
  _clear_bit(2);
}
inline chat::ChatRequestType Question::type() const {
  return static_cast< chat::ChatRequestType >(type_);
}
inline void Question::set_type(chat::ChatRequestType value) {
  GOOGLE_DCHECK(chat::ChatRequestType_IsValid(value));
  _set_bit(2);
  type_ = value;
}

// optional string message = 4;
inline bool Question::has_message() const {
  return _has_bit(3);
}
inline void Question::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Question::message() const {
  return *message_;
}
inline void Question::set_message(const ::std::string& value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Question::set_message(const char* value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Question::set_message(const char* value, size_t size) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Question::mutable_message() {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// optional bytes pic = 5;
inline bool Question::has_pic() const {
  return _has_bit(4);
}
inline void Question::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Question::pic() const {
  return *pic_;
}
inline void Question::set_pic(const ::std::string& value) {
  _set_bit(4);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void Question::set_pic(const char* value) {
  _set_bit(4);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void Question::set_pic(const void* value, size_t size) {
  _set_bit(4);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Question::mutable_pic() {
  _set_bit(4);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional bytes video = 6;
inline bool Question::has_video() const {
  return _has_bit(5);
}
inline void Question::clear_video() {
  if (video_ != &_default_video_) {
    video_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Question::video() const {
  return *video_;
}
inline void Question::set_video(const ::std::string& value) {
  _set_bit(5);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(value);
}
inline void Question::set_video(const char* value) {
  _set_bit(5);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(value);
}
inline void Question::set_video(const void* value, size_t size) {
  _set_bit(5);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Question::mutable_video() {
  _set_bit(5);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  return video_;
}

// -------------------------------------------------------------------

// Answer

// required string result = 1;
inline bool Answer::has_result() const {
  return _has_bit(0);
}
inline void Answer::clear_result() {
  if (result_ != &_default_result_) {
    result_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Answer::result() const {
  return *result_;
}
inline void Answer::set_result(const ::std::string& value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Answer::set_result(const char* value) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Answer::set_result(const char* value, size_t size) {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_result() {
  _set_bit(0);
  if (result_ == &_default_result_) {
    result_ = new ::std::string;
  }
  return result_;
}

// required .chat.ChatRequestType type = 2;
inline bool Answer::has_type() const {
  return _has_bit(1);
}
inline void Answer::clear_type() {
  type_ = 8000;
  _clear_bit(1);
}
inline chat::ChatRequestType Answer::type() const {
  return static_cast< chat::ChatRequestType >(type_);
}
inline void Answer::set_type(chat::ChatRequestType value) {
  GOOGLE_DCHECK(chat::ChatRequestType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// optional string message = 3;
inline bool Answer::has_message() const {
  return _has_bit(2);
}
inline void Answer::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Answer::message() const {
  return *message_;
}
inline void Answer::set_message(const ::std::string& value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Answer::set_message(const char* value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Answer::set_message(const char* value, size_t size) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_message() {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// optional bytes pic = 4;
inline bool Answer::has_pic() const {
  return _has_bit(3);
}
inline void Answer::clear_pic() {
  if (pic_ != &_default_pic_) {
    pic_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Answer::pic() const {
  return *pic_;
}
inline void Answer::set_pic(const ::std::string& value) {
  _set_bit(3);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void Answer::set_pic(const char* value) {
  _set_bit(3);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void Answer::set_pic(const void* value, size_t size) {
  _set_bit(3);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_pic() {
  _set_bit(3);
  if (pic_ == &_default_pic_) {
    pic_ = new ::std::string;
  }
  return pic_;
}

// optional bytes video = 5;
inline bool Answer::has_video() const {
  return _has_bit(4);
}
inline void Answer::clear_video() {
  if (video_ != &_default_video_) {
    video_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Answer::video() const {
  return *video_;
}
inline void Answer::set_video(const ::std::string& value) {
  _set_bit(4);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(value);
}
inline void Answer::set_video(const char* value) {
  _set_bit(4);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(value);
}
inline void Answer::set_video(const void* value, size_t size) {
  _set_bit(4);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  video_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_video() {
  _set_bit(4);
  if (video_ == &_default_video_) {
    video_ = new ::std::string;
  }
  return video_;
}


}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< chat::ChatRequestType>() {
  return chat::ChatRequestType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_chat_2eproto__INCLUDED
